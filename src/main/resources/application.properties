#
# <dev-note> 
# 1. one major advantage of using STS is you get code completion in the Application.propertoes
# 2. It is possible to specify values in this file and then pick them in code using @value("${name}")
# 3. It is possible to use the same variables in the Application.properties file using ${variable} syntax
# 4. 

# Three H@ schemas specified
# 1 for OLTP - OLTP reads
# 2 for Spring Batch infrastructure
# 3 for Writes to simulate DW. 

# some good info on creating two datasources here: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-two-datasources
spring.oltp.datasource.driver-class-name=org.h2.Driver
spring.oltp.datasource.jdbc-url=jdbc:h2:tcp://localhost/file:~/developer/dbs/extract/H2/extractdb;SCHEMA=OLTP;FILE_LOCK=SOCKET;MVCC=true
spring.oltp.datasource.username=DBUSER
spring.oltp.datasource.password=p
# spring.oltp.datasource.platform could also be hsqldb, oracle, mysql, postgresql, etc.
spring.oltp.datasource.platform=h2  
# Other options for this would be: always
spring.oltp.datasource.initialization-mode=never

#separate schema for batch here. See tip here: 
# https://stackoverflow.com/questions/30994838/spring-batch-metadata-tables-in-different-schema/33426447
# and here;
# https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-two-datasources

# To create this schema in H2 DO:
# CREATE SCHEMA TOOLS AUTHORIZATION DBUSER
# SHOW SCHEMAS
#
# It's a convention to also include the batch in the namespace of the schema for the batch tables. 
#
spring.batch.datasource.jdbc-url=jdbc:h2:tcp://localhost/file:~/developer/dbs/extract/H2/extractdb;schema=tools;FILE_LOCK=SOCKET;MVCC=true
spring.batch.datasource.driver-class-name=org.h2.Driver
spring.batch.datasource.url=jdbc:h2:tcp://localhost/file:~/developer/dbs/extract/H2/extractdb;schema=tools;FILE_LOCK=SOCKET;MVCC=true
spring.batch.datasource.jdbcUrl=jdbc:h2:tcp://localhost/file:~/developer/dbs/extract/H2/extractdb;schema=tools;FILE_LOCK=SOCKET;MVCC=true
spring.batch.datasource.username=DBUSER
spring.batch.datasource.password=p
spring.batch.datasource.platform=h2
spring.batch.datasource.initialization-mode=never

# Schema used to write output 
spring.dw.datasource.jdbc-url=jdbc:h2:tcp://localhost/file:~/developer/dbs/extract/H2/extractdb;SCHEMA=DW
spring.dw.datasource.url=jdbc:h2:tcp://localhost/file:~/developer/dbs/extract/H2/extractdb;SCHEMA=DW
spring.dw.datasource.driver-class-name=org.h2.Driver
spring.dw.datasource.username=DBUSER
spring.dw.datasource.password=p
spring.dw.datasource.platform=h2
spring.dw.datasource.initialization-mode=never


# Extra properties, don't launch all the jobs you find in the application context. 
# Better to check some input parameters and then decided what to launch
spring.batch.job.enabled=false 
# Enabling debug below so can get the configuration report. 
debug=true

#Just demo-ing that the application.properties can be used for generating random strings
my.messageValue=${random.value}
#and change value for profiles
my.profileConfig="This is the dev profile"

